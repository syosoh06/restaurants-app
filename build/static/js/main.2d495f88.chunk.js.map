{"version":3,"sources":["reducers/Restaurants/reducer.js","actions/action-types.js","reducers/index.js","components/Grid/grid.jsx","components/Restaurants-List/restaurants-list.jsx","components/Restaurants-List/restaurants-list.connector.js","actions/Restuarants-List/actions.js","App.js","index.js","store/configureStore.js"],"names":["restaurantsReducer","state","arguments","length","undefined","action","type","restaurants","combineReducers","Grid","props","columns","rows","react_default","a","createElement","react_data_grid_default","rowGetter","i","rowsCount","key","name","RestaurantsList","_useState","useState","restaurantName","_useState2","Object","slicedToArray","setState","value","onChange","event","target","fetchRestaurantsByName","defaultProps","connect","dispatch","Axios","get","params","city","per_page","then","response","data","catch","error","restaurantActions","App","className","restaurants_list_connector","store","initialState","middewares","thunkMiddleware","createStore","rootReducer","compose","applyMiddleware","apply","window","devToolsExtension","f","configureStore","render","es","src_App","document","getElementById"],"mappings":"kNAWeA,EATY,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,OAAQC,EAAOC,MACX,ICJyC,oCDKrC,OAAOD,EAAOE,YAClB,QACI,OAAON,IEJJO,cAAgB,CAC3BD,YAAaP,iCCDF,SAASS,EAAKC,GAAO,IACzBC,EAAiBD,EAAjBC,QAASC,EAAQF,EAARE,KAEhB,OAAQC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACJH,QAASA,EACTM,UAAW,SAAAC,GAAC,OAAIN,EAAKM,IACrBC,UAAWP,EAAKT,SCLxB,IAAMQ,EAAU,CACZ,CAAES,IAAK,OAAQC,KAAM,QACrB,CAAED,IAAK,UAAWC,KAAM,WACxB,CAAED,IAAK,OAAQC,KAAM,QACrB,CAAED,IAAK,QAASC,KAAM,UAG1B,SAASC,EAAgBZ,GAAO,IAAAa,EACFC,mBAAS,CAACC,eAAgB,KADxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACrBtB,EADqByB,EAAA,GACdG,EADcH,EAAA,GAO5B,OAAQb,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,SAAOT,KAAK,OAAOwB,MAAO7B,EAAMwB,eAAgBM,SATvC,SAACC,GAClBH,EAAS,CAACJ,eAAgBO,EAAMC,OAAOH,QACvCpB,EAAMwB,uBAAuBjC,EAAMwB,qBAUnCZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACN,EAAD,CACIE,QAASA,EACTC,KAAMF,EAAMH,gBAM5Be,EAAgBa,aAAe,CAC3B5B,YAAa,IAOFe,yBC7BAc,cARgB,SAACnC,GAAD,MAAY,CACvCM,YAAaN,EAAMM,cAGW,SAAA8B,GAAQ,MAAK,CAC3CH,uBAAwB,SAAAT,GAAc,OAAIY,ECER,SAACZ,GACnC,OAAO,SAACY,GACJ,OAAOC,IAAMC,IAXN,kDAWkB,CACrBC,OAAQ,CACJC,KAAMhB,EACNiB,SAAU,OAEfC,KAAK,SAAAC,GACAP,EAdL,CACH/B,KLPyC,oCKQzCC,YAY+CqC,EAASC,KAAKtC,YAAcqC,EAASC,KAAKtC,YAAc,OAElGuC,MAAM,SAAAC,GACH,MAAMA,KDbiCC,CAAyCvB,OAGjFW,CAGbd,SEJa2B,MARf,WACE,OACEpC,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,OACbrC,EAAAC,EAAAC,cAACoC,EAAD,QCEAC,ECLS,SAAwBC,GACnC,IAAMC,EAAa,CACfC,KAiBJ,OAdcC,YAAYC,EAAaJ,EAAcK,YACjDC,IAAeC,WAAf,EAAmBN,GACnBO,OAAOC,kBAAoBD,OAAOC,oBAAsB,SAAAC,GAAC,OAAIA,KDFvDC,GAEdC,iBACIpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAUd,MAAOA,GACbvC,EAAAC,EAAAC,cAACoD,EAAD,OAEJC,SAASC,eAAe","file":"static/js/main.2d495f88.chunk.js","sourcesContent":["import * as actionTypes from '../../actions/action-types';\n\nconst restaurantsReducer = (state = [], action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_RESTAURANTS_BY_NAME_SUCCESS:\n            return action.restaurants;\n        default:\n            return state;\n    }\n};\n\nexport default restaurantsReducer;","export const FETCH_RESTAURANTS_BY_NAME_SUCCESS = 'FETCH_RESTAURANTS_BY_NAME_SUCCESS';\n","import { combineReducers } from 'redux';\nimport restaurantsReducer from './Restaurants/reducer'\n\nexport default combineReducers({\n    restaurants: restaurantsReducer\n});","import React from \"react\";\nimport ReactDataGrid from \"react-data-grid\";\n\nexport default function Grid(props) {\n    const {columns, rows} = props;\n\n    return (<ReactDataGrid\n        columns={columns}\n        rowGetter={i => rows[i]}\n        rowsCount={rows.length}\n    />);\n}\n\n\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from \"../Grid/grid\";\n\nconst columns = [\n    { key: \"name\", name: \"Name\" },\n    { key: \"address\", name: \"Address\" },\n    { key: \"city\", name: \"City\" },\n    { key: \"price\", name: \"Price\" }\n];\n\nfunction RestaurantsList(props) {\n    const [state, setState] = useState({restaurantName: ''});\n    const handleChange = (event) => {\n        setState({restaurantName: event.target.value});\n        props.fetchRestaurantsByName(state.restaurantName);\n    };\n\n    return (<div>\n        <div>\n            <label>\n                <span>Enter a City Name:  </span>\n                <input type=\"text\" value={state.restaurantName} onChange={handleChange} />\n            </label>\n        </div>\n        <div>\n            <Grid\n                columns={columns}\n                rows={props.restaurants}\n            />\n        </div>\n    </div>);\n}\n\nRestaurantsList.defaultProps = {\n    restaurants: []\n};\nRestaurantsList.propTypes = {\n    restaurants: PropTypes.array,\n    fetchRestaurantsByName: PropTypes.func\n};\n\nexport default RestaurantsList;\n","import { connect } from 'react-redux';\n\nimport RestaurantsList from './restaurants-list';\nimport * as restaurantActions from '../../actions/Restuarants-List/actions';\n\nexport const mapStateToProps = (state) => ({\n    restaurants: state.restaurants\n});\n\nexport const mapDispatchToProps = dispatch => ({\n    fetchRestaurantsByName: restaurantName => dispatch(restaurantActions.fetchRestaurantsByName(restaurantName))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(RestaurantsList);\n","import * as actionTypes from '../action-types';\nimport Axios from 'axios';\n\nconst apiUrl = 'https://opentable.herokuapp.com/api/restaurants';\n\nconst fetchRestaurantsByNameSuccess = (restaurants) => {\n    return {\n        type: actionTypes.FETCH_RESTAURANTS_BY_NAME_SUCCESS,\n        restaurants\n    }\n};\n\nexport const fetchRestaurantsByName = (restaurantName) => {\n    return (dispatch) => {\n        return Axios.get(apiUrl, {\n            params: {\n                city: restaurantName,\n                per_page: 100\n            }\n        }).then(response => {\n                dispatch(fetchRestaurantsByNameSuccess(response.data.restaurants ? response.data.restaurants : []));\n            })\n            .catch(error => {\n                throw(error);\n            });\n    };\n};\n","import React from 'react';\nimport RestaurantsList from './components/Restaurants-List/restaurants-list.connector';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RestaurantsList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { render } from 'react-dom';\n// import './../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport configureStore from './store/configureStore';\nimport App from \"./App\";\n\nconst store = configureStore();\n\nrender(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n","import {createStore, compose, applyMiddleware} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nexport default function configureStore(initialState) {\n    const middewares = [\n        thunkMiddleware,\n    ];\n\n    const store = createStore(rootReducer, initialState, compose(\n        applyMiddleware(...middewares),\n        window.devToolsExtension ? window.devToolsExtension() : f => f // add support for Redux dev tools\n        )\n    );\n\n    if (module.hot) {\n        // Enable Webpack hot module replacement for reducers\n        module.hot.accept('../reducers', () => {\n            const nextReducer = require('../reducers').default; // eslint-disable-line global-require\n            store.replaceReducer(nextReducer);\n        });\n    }\n\n    return store;\n}"],"sourceRoot":""}