{"ast":null,"code":"import { createStore, compose, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from '../reducers';\nexport default function configureStore(initialState) {\n  const middewares = [thunkMiddleware];\n  const store = createStore(rootReducer, initialState, compose(applyMiddleware(...middewares), window.devToolsExtension ? window.devToolsExtension() : f => f // add support for Redux dev tools\n  ));\n\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', () => {\n      const nextReducer = require('../reducers').default; // eslint-disable-line global-require\n\n\n      store.replaceReducer(nextReducer);\n    });\n  }\n\n  return store;\n}","map":{"version":3,"sources":["/Users/sohamchakraborty/WebstormProjects/restuarant-app/src/store/configureStore.js"],"names":["createStore","compose","applyMiddleware","thunkMiddleware","rootReducer","configureStore","initialState","middewares","store","window","devToolsExtension","f","module","hot","accept","nextReducer","require","default","replaceReducer"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,OAArB,EAA8BC,eAA9B,QAAoD,OAApD;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,eAAe,SAASC,cAAT,CAAwBC,YAAxB,EAAsC;AACjD,QAAMC,UAAU,GAAG,CACfJ,eADe,CAAnB;AAIA,QAAMK,KAAK,GAAGR,WAAW,CAACI,WAAD,EAAcE,YAAd,EAA4BL,OAAO,CACxDC,eAAe,CAAC,GAAGK,UAAJ,CADyC,EAExDE,MAAM,CAACC,iBAAP,GAA2BD,MAAM,CAACC,iBAAP,EAA3B,GAAwDC,CAAC,IAAIA,CAFL,CAEO;AAFP,GAAnC,CAAzB;;AAMA,MAAIC,MAAM,CAACC,GAAX,EAAgB;AACZ;AACAD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,aAAlB,EAAiC,MAAM;AACnC,YAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBC,OAA3C,CADmC,CACiB;;;AACpDT,MAAAA,KAAK,CAACU,cAAN,CAAqBH,WAArB;AACH,KAHD;AAIH;;AAED,SAAOP,KAAP;AACH","sourcesContent":["import {createStore, compose, applyMiddleware} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nexport default function configureStore(initialState) {\n    const middewares = [\n        thunkMiddleware,\n    ];\n\n    const store = createStore(rootReducer, initialState, compose(\n        applyMiddleware(...middewares),\n        window.devToolsExtension ? window.devToolsExtension() : f => f // add support for Redux dev tools\n        )\n    );\n\n    if (module.hot) {\n        // Enable Webpack hot module replacement for reducers\n        module.hot.accept('../reducers', () => {\n            const nextReducer = require('../reducers').default; // eslint-disable-line global-require\n            store.replaceReducer(nextReducer);\n        });\n    }\n\n    return store;\n}"]},"metadata":{},"sourceType":"module"}