{"ast":null,"code":"import * as actionTypes from '../action-types';\nimport Axios from 'axios';\nconst apiUrl = 'https://opentable.herokuapp.com/api/restaurants';\n\nconst fetchRestaurantsByNameSuccess = restaurants => {\n  return {\n    type: actionTypes.FETCH_RESTAURANTS_BY_NAME_SUCCESS,\n    restaurants\n  };\n};\n\nexport const fetchRestaurantsByName = restaurantName => {\n  return dispatch => {\n    return Axios.get(apiUrl, {\n      params: {\n        city: restaurantName,\n        per_page: 100\n      }\n    }).then(response => {\n      dispatch(fetchRestaurantsByNameSuccess(response.data.restaurants || []));\n    }).catch(error => {\n      throw error;\n    });\n  };\n};","map":{"version":3,"sources":["/Users/sohamchakraborty/WebstormProjects/restuarant-app/src/actions/Restuarants-List/actions.js"],"names":["actionTypes","Axios","apiUrl","fetchRestaurantsByNameSuccess","restaurants","type","FETCH_RESTAURANTS_BY_NAME_SUCCESS","fetchRestaurantsByName","restaurantName","dispatch","get","params","city","per_page","then","response","data","catch","error"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,iBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,MAAM,GAAG,iDAAf;;AAEA,MAAMC,6BAA6B,GAAIC,WAAD,IAAiB;AACnD,SAAO;AACHC,IAAAA,IAAI,EAAEL,WAAW,CAACM,iCADf;AAEHF,IAAAA;AAFG,GAAP;AAIH,CALD;;AAOA,OAAO,MAAMG,sBAAsB,GAAIC,cAAD,IAAoB;AACtD,SAAQC,QAAD,IAAc;AACjB,WAAOR,KAAK,CAACS,GAAN,CAAUR,MAAV,EAAkB;AACrBS,MAAAA,MAAM,EAAE;AACJC,QAAAA,IAAI,EAAEJ,cADF;AAEJK,QAAAA,QAAQ,EAAE;AAFN;AADa,KAAlB,EAKJC,IALI,CAKCC,QAAQ,IAAI;AACZN,MAAAA,QAAQ,CAACN,6BAA6B,CAACY,QAAQ,CAACC,IAAT,CAAcZ,WAAd,IAA6B,EAA9B,CAA9B,CAAR;AACH,KAPE,EAQFa,KARE,CAQIC,KAAK,IAAI;AACZ,YAAMA,KAAN;AACH,KAVE,CAAP;AAWH,GAZD;AAaH,CAdM","sourcesContent":["import * as actionTypes from '../action-types';\nimport Axios from 'axios';\n\nconst apiUrl = 'https://opentable.herokuapp.com/api/restaurants';\n\nconst fetchRestaurantsByNameSuccess = (restaurants) => {\n    return {\n        type: actionTypes.FETCH_RESTAURANTS_BY_NAME_SUCCESS,\n        restaurants\n    }\n};\n\nexport const fetchRestaurantsByName = (restaurantName) => {\n    return (dispatch) => {\n        return Axios.get(apiUrl, {\n            params: {\n                city: restaurantName,\n                per_page: 100\n            }\n        }).then(response => {\n                dispatch(fetchRestaurantsByNameSuccess(response.data.restaurants || []));\n            })\n            .catch(error => {\n                throw(error);\n            });\n    };\n};\n"]},"metadata":{},"sourceType":"module"}